<WHY WE LEARN ABOUT GIT AND GITHUB?>

- Save and read the previously modified works.
- Work with other people to solve the problem.
- Etc...

<WHEN YOU USE GIT AND GITHUB FIRST...>

1. Make a folder.
2. Open the PowerShell in the folder(right click to the folder and open the PowerShell).
3. Write the two sentences at the bottom.
    -> git config --global user.email "UserEmail"
    -> git config --global user.name "UserName"
    Ex) git config --global user.email "03_junghee@naver.com"
        git config --global user.name "03_junghee"

<LET'S USE THE GIT!>

1. Open the folder in the editor(Visual Studio Code).
2. Open the New Terminal(Terminal -> New Terminal or Ctrl + Shift + `).
3. Write "git init" in the Terminal.

<If YOU WANT TO RECORD OR MODIFY THE FILE...>

1. Write "git add FileName" in the Terminal.
2. Write "git commit -m 'memo'".
Ex) git add app.txt
    git commit -m 'this is my first file.'

<WHAT IS THE STAGING AREA AND REPOSITORY?>

STAGING AREA
- Staging area is where you select files to commit before committing.
- Staging is an act of putting files on the staging area.
- You can stage by using the command "git add".

REPOSITORY
- Repository is where you collect the versions of the committed file.
- You can see the repository in the .git folder. 

(If you look at the staging area and repository.png, you can understand it in more detail.)

<MORE COMMANDS...>

- If you want to stag lots of files...
    -> git add FileName1 FileName2 ...
    Ex) git add app.txt abc.txt ...

- If you want to stag all files...
    -> git add .

- If you want to see the status...
    -> git status

- If you want to cancel the staging file...
    -> git restore --staged FileName
    Ex) git restore --staged app.txt

- If you want to see the commit record at a glance...
    -> git log --all --oneline
    (if you want to see this as a graph...)
    -> git log --all --oneline --graph

<HOW OFTEN SHOULD WE COMMIT?>

- You don't have to commit habitually like pressing Ctrl + S.
- Commit every time you add a simple feature.